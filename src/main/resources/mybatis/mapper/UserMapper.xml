<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.community_shop.backend.mapper.UserMapper">

    <!-- 结果集映射：匹配User实体与user表字段（无需重复指定typeHandler） -->
    <resultMap id="BaseResultMap" type="com.community_shop.backend.entity.User">
        <id column="user_id" property="userId"/>
        <result column="username" property="username"/>
        <result column="email" property="email"/>
        <result column="phone_number" property="phoneNumber"/>
        <result column="password" property="password"/>
        <result column="avatar_url" property="avatarUrl"/>
        <result column="bio" property="bio"/>
        <result column="gender" property="gender"/> <!-- 自动匹配GenderEnumTypeHandler -->
        <result column="role" property="role"/> <!-- 自动匹配UserRoleEnumTypeHandler -->
        <result column="credit_score" property="creditScore"/>
        <result column="post_count" property="postCount"/>
        <result column="follower_count" property="followerCount"/>
        <result column="interest_tags" property="interestTags"/> <!-- 自动匹配ListStringTypeHandler -->
        <result column="activity_time" property="activityTime"/>
        <result column="create_time" property="createTime"/>
    </resultMap>

    <!-- 基础字段SQL片段，减少冗余 -->
    <sql id="Base_Column_List">
        user_id, username, email, phone_number, password, avatar_url, bio, gender, role,
        credit_score, post_count, follower_count, interest_tags, activity_time, create_time
    </sql>


    <!-- ==================== 基础CRUD ==================== -->
    <insert id="insert" parameterType="com.community_shop.backend.entity.User">
        INSERT INTO user (
        username, email, phone_number, password, avatar_url, bio, gender, role,
        credit_score, post_count, follower_count, interest_tags, activity_time, create_time
        ) VALUES (
        #{username}, #{email}, #{phoneNumber}, #{password}, #{avatarUrl}, #{bio},
        #{gender.code,jdbcType=VARCHAR}, <!-- 简化：无需显式指定typeHandler -->
        #{role.code,jdbcType=VARCHAR}, <!-- 简化：无需显式指定typeHandler -->
        #{creditScore}, #{postCount}, #{followerCount},
        #{interestTags,jdbcType=VARCHAR}, <!-- 简化：无需显式指定typeHandler -->
        #{activityTime}, #{createTime}
        )
    </insert>

    <select id="selectById" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/> FROM user WHERE user_id = #{userId}
    </select>

    <update id="updateById" parameterType="com.community_shop.backend.entity.User">
        UPDATE user
        <set>
            <if test="username != null">username = #{username},</if>
            <if test="email != null">email = #{email},</if>
            <if test="phoneNumber != null">phone_number = #{phoneNumber},</if>
            <if test="password != null">password = #{password},</if>
            <if test="avatarUrl != null">avatar_url = #{avatarUrl},</if>
            <if test="bio != null">bio = #{bio},</if>
            <if test="gender != null">
                gender = #{gender.code,jdbcType=VARCHAR}, <!-- 简化：无需显式指定typeHandler -->
            </if>
            <if test="role != null">
                role = #{role.code,jdbcType=VARCHAR}, <!-- 简化：无需显式指定typeHandler -->
            </if>
            <if test="activityTime != null">activity_time = #{activityTime},</if>
        </set>
        WHERE user_id = #{userId}
    </update>

    <delete id="deleteById">
        DELETE FROM user WHERE user_id = #{userId}
    </delete>


    <!-- ==================== 登录与身份校验 ==================== -->
    <select id="selectByUsername" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/> FROM user WHERE username = #{username}
    </select>

    <select id="selectByPhone" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/> FROM user WHERE phone_number = #{phoneNumber}
    </select>

    <select id="selectByEmail" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/> FROM user WHERE email = #{email}
    </select>


    <!-- ==================== 信用分与统计 ==================== -->
    <update id="updateCreditScore">
        UPDATE user SET credit_score = #{score} WHERE user_id = #{userId}
    </update>

    <update id="updatePostCount">
        UPDATE user SET post_count = post_count + 1 WHERE user_id = #{userId}
    </update>

    <update id="updateFollowerCount">
        UPDATE user SET follower_count = #{count} WHERE user_id = #{userId}
    </update>


    <!-- ==================== 条件查询 ==================== -->
    <select id="getUsersByAllParam" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/> FROM user
        <where>
            <if test="compareIndex != null and compareParam != null">
                ${compareIndex} = #{compareParam}
            </if>
        </where>
        <if test="order != null and direction != null">
            ORDER BY ${order} ${direction}
        </if>
        LIMIT #{offset}, #{limit}
    </select>

    <select id="selectByRole" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/> FROM user
        WHERE role = #{role.code,jdbcType=VARCHAR} <!-- 简化：无需显式指定typeHandler -->
    </select>

    <!-- 1. 多条件统计用户总数 -->
    <select id="countByQuery" parameterType="com.community_shop.backend.dto.user.UserQueryDTO" resultType="java.lang.Integer">
        SELECT COUNT(1) FROM user
        <where>
            <!-- 条件1：兴趣标签匹配（支持多个标签，满足任一标签即匹配） -->
            <if test="interestTags != null and interestTags.size() > 0">
                AND (
                <foreach collection="interestTags" item="tag" separator="OR">
                    FIND_IN_SET(#{tag,jdbcType=VARCHAR}, interest_tags)
                </foreach>
                )
            </if>
            <!-- 条件2：筛选字段+筛选值匹配（如creditScore=80、postCount=5） -->
            <if test="filterField != null and filterValue != null">
                AND ${filterField} = #{filterValue,jdbcType=VARCHAR}
            </if>
        </where>
    </select>

    <!-- 2. 多条件查询用户列表（支持标签、筛选、排序、分页） -->
    <select id="selectByQuery" parameterType="com.community_shop.backend.dto.user.UserQueryDTO" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/> FROM user
        <where>
            <!-- 条件1：兴趣标签匹配（支持多个标签，满足任一标签即匹配） -->
            <if test="interestTags != null and interestTags.size() > 0">
                AND (
                <foreach collection="interestTags" item="tag" separator="OR">
                    FIND_IN_SET(#{tag,jdbcType=VARCHAR}, interest_tags)
                </foreach>
                )
            </if>
            <!-- 条件2：筛选字段+筛选值匹配（如creditScore=80、postCount=5） -->
            <if test="filterField != null and filterValue != null">
                AND ${filterField} = #{filterValue,jdbcType=VARCHAR}
            </if>
        </where>
        <!-- 排序：支持枚举指定的排序字段（如createTime、followerCount）和排序方向（ASC/DESC） -->
        <if test="sortField != null and sortDir != null">
            ORDER BY ${sortField} ${sortDir}
        </if>
        <!-- 分页：基于PageParam的pageNum和pageSize计算偏移量（offset = (pageNum-1)*pageSize） -->
        <if test="pageNum != null and pageSize != null">
            LIMIT #{offset,jdbcType=INTEGER}, #{pageSize,jdbcType=INTEGER}
        </if>
    </select>

</mapper>